<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sl.ylyy.app_1.dao.MaterialMapper">
  <resultMap id="BaseResultMap" type="com.sl.ylyy.app_1.entity.Material">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="malfunction_id" jdbcType="INTEGER" property="malfunctionId" />
    <result column="storekeeper" jdbcType="INTEGER" property="storekeeper" />
    <result column="create_at" jdbcType="INTEGER" property="createAt" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.sl.ylyy.app_1.entity.Material">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, create_by, malfunction_id, storekeeper, create_at
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from material1
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectByMalfunctionId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select storekeeper from material where malfunction_id=#{malfunctionId}
  </select>

  <select id="selectKeeperByMidFromAppoint" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select storekeeper from material_appointment where malfunction_id=#{malfunctionId}
  </select>

  <select id="selectMaterialByMalfunctionId" parameterType="java.lang.Integer" resultType="java.util.Map">
    select `name`,`number` from material_appointment
    where malfunction_id=#{malfunctionId}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from material
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sl.ylyy.app_1.entity.Material">
    insert into material (id, create_by, malfunction_id,
      storekeeper, create_at, content
      )
    values (#{id,jdbcType=INTEGER}, #{createBy,jdbcType=INTEGER}, #{malfunctionId,jdbcType=INTEGER}, 
      #{storekeeper,jdbcType=INTEGER}, #{createAt,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sl.ylyy.app_1.entity.Material">
    insert into material
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="malfunctionId != null">
        malfunction_id,
      </if>
      <if test="storekeeper != null">
        storekeeper,
      </if>
        create_at,
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="malfunctionId != null">
        #{malfunctionId,jdbcType=INTEGER},
      </if>
      <if test="storekeeper != null">
        #{storekeeper,jdbcType=INTEGER},
      </if>
      unix_timestamp(now()),
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sl.ylyy.app_1.entity.Material">
    update material
    <set>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="malfunctionId != null">
        malfunction_id = #{malfunctionId,jdbcType=INTEGER},
      </if>
      <if test="storekeeper != null">
        storekeeper = #{storekeeper,jdbcType=INTEGER},
      </if>
      <if test="createAt != null">
        create_at = #{createAt,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.sl.ylyy.app_1.entity.Material">
    update material
    set create_by = #{createBy,jdbcType=INTEGER},
      malfunction_id = #{malfunctionId,jdbcType=INTEGER},
      storekeeper = #{storekeeper,jdbcType=INTEGER},
      create_at = #{createAt,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sl.ylyy.app_1.entity.Material">
    update material
    set create_by = #{createBy,jdbcType=INTEGER},
      malfunction_id = #{malfunctionId,jdbcType=INTEGER},
      storekeeper = #{storekeeper,jdbcType=INTEGER},
      create_at = #{createAt,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>